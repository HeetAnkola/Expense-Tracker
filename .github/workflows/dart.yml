name: Flutter Build (iOS & Android)

on:
  workflow_dispatch:
  
jobs:

  # get_version:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Get Latest Release
  #     id: get_latest_release
  #     uses: actions/github-script@v6
  #     with:
  #       script: |
  #         const { data: release } = await github.rest.repos.getLatestRelease({
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #         });
  #         core.setOutput('version', release.tag_name);
  #   - name: Display Version
  #     run: echo "The released version is ${{ steps.get_latest_release.outputs.version }}"

  increment_version:
    runs-on: ubuntu-latest
    steps:
      - name: Get Latest Release
        id: get_latest_release
        uses: actions/get-latest-release@v1
        with:
          repo: ${{ github.repository }}

      - name: Extract Version Components
        id: extract_version
        run: |
          # Assuming version format is MAJOR.MINOR.PATCH
          echo "major=$(echo ${{ steps.get_latest_release.outputs.version }} | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo ${{ steps.get_latest_release.outputs.version }} | cut -d. -f2)" >> $GITHUB_OUTPUT
          echo "patch=$(echo ${{ steps.get_latest_release.outputs.version }} | cut -d. -f3)" >> $GITHUB_OUTPUT

      - name: Increment Patch Version
        id: increment_patch
        run: |
          patch=$((steps.extract_version.outputs.patch + 1))
          echo "incremented_patch=$patch" >> $GITHUB_OUTPUT

      - name: Assemble New Version
        id: assemble_version
        run: |
          new_version="${{ steps.extract_version.outputs.major }}.${{ steps.extract_version.outputs.minor }}.${{ steps.increment_patch.outputs.incremented_patch }}"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      # Use the new_version output in subsequent steps
      - name: Use New Version
        run: |
          echo "The new version is ${{ steps.assemble_version.outputs.new_version }}"
          # Create a new tag, update package.json, etc.

        
  build-ios:
    name: ðŸŽ‰ iOS Build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64
      - run: flutter pub get
      
      - run: pod repo update
        working-directory: ios

      - run: flutter build ios --release --no-codesign

      - run: mkdir Payload
        working-directory: build/ios/iphoneos

      - run: mv Runner.app/ Payload
        working-directory: build/ios/iphoneos

      - name: Zip output
        run: zip -qq -r -9 FlutterIpaExport.ipa Payload
        working-directory: build/ios/iphoneos

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/ios/iphoneos/FlutterIpaExport.ipa
          tag: ${{ steps.get_latest_release.outputs.version }} 
          overwrite: true
          body: "This is ${{ steps.get_latest_release.outputs.version }} release"

  build-android:
    name: ðŸ¤– Android Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Build APK
        run: flutter build apk --release

      # - name: Upload APK artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: app-release.apk
      #     path: build/app/outputs/flutter-apk/app-release.apk

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/app/outputs/flutter-apk/app-release.apk
          tag: v1.0
          overwrite: true
          body: "This is first release"
